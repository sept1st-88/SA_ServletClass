
웹 용어

서버(Server)와 클라이언트(Client)

문제를 해결해 달라고 요청하는 쪽이 클라이언트
문제를 해결해서 돌려보내는 쪽이 서버다

요청(Request) / 응답(Response)
클라이언트가 서버에게 문제를 해결해달라고 요구하는 행위는 요청(Request)라고 한다
반대로 서버가 문제를 해결해서 클라이언트에게 보여주는 행위는 응답(Response)라고 한다

따라서 웹 브라우저가 클라이언트이고, 웹 서버는 서버라 할 수 있다

프로토콜(Protocol, 규약, 규칙, 약속)
서버 쪽에서 문제를 제대로 해결했는 지 실패했는 지에 따라 약속된 값을
클라이언트로 보낼 수 있는데 이를 응답 상태코드(Status Code)라고 한다

상태코드	상태설명
200		요청이 성공적으로 처리되었다
400		잘못된 요청이다
404		요청한 자원을 못 찾았다, 서버가 요청한 파일이나 스크립트를 찾지 못함
		경로가 잘못되거나 없는 jsp / servlet을 호출
405 	메서드 허용 안됨 -> doGet()이 없는데 Get방식으로 호출
500		서버 내부에서 오류가  발생하였다 -> 문법오류 등 서버코드에서 문제 발생

웹 서버(Web Server)
웹 서버는 서버쪽 컴퓨터에 있는 소프트웨어이다
클라이언트의 요청을 받아서 웹 페이지(html, 그림파일, css, 자바스크립트 등으로 구성된 문서)를 
클라이언트인 웹 브라우저에 응답하는 역할을 한다

HTTP(HyperText Transfer Protocol)
웹 서버에서 서버-클라이언트 사이에 대화(Request / Response)를 할 수 있도록 만든 규약이다
HTTP는 헤더(Header)와 바디(Body)로 구성된다
서버의 간단한 정보, 응답 내용의 타입 및 인코딩, 응답 크기 등이 포함된다
응답헤더가 브라우저에게 전달되면 응답바디 내용이 브라우저에게 출력된다

FTP(File Transfer Protocol)
클라이언트와 서버 간에 파일을 주고받기 위해 만든 통신규약입니다

Telnet
인터넷이나 LAN(Local Area Network)상에서 문자 기반으로
원격의 컴퓨터를 제어하기 위해 만든 통신 규약입니다
요즘은 보안 떄문에 SSH(Secure Shell)프로토콜 기반 원격 접속
프로그램을 주로 사용합니다

SMTP(Simple Mail Trasfer Protocol)
인터넷 상에서 메일을 보내기 위한 통신 규약입니다
POP3(Post Office Protocol Version 3)는 이메일을 가져오는데
사용하는 통신 규약이며 POP3는 이메일을 가져온 후
서버의 메일을 삭제합니다

IRC(Internet Relay Chat)
실시간 채팅을 위해 만든 통신 규약입니다


*웹 프로젝트 폴더 구조*

src
자바 소스 파일을 두는 폴더이다. 앞으로 이 폴더에 서블릿 클래스나 필터, 리스너, 등
필요한 모든 자바 클래스 파일을 둘 것이다.
프로퍼티 파일(.properties)도 이 폴더에 둔다.

build/classes
컴파일된 자바 클래스 파일(.class)이 놓이는 폴더이다.
패키지에 소속된 클래스인 경우 이 폴더에 해당 패키지가 자동으로 만들어진다.

WebContent
.html, .css, .js, .jsp, 이미지 파일 등
웹 컨텐츠를 두는 폴더이다.
웹 어플리케이션을 서버에 배치할 때 이 폴더의 내용물이 그대로 복사된다

WebContent/WEB-INF
웹 애플리케이션의 설정과 관련된 파일을 두는 폴더이다.
이 폴더에 있는 파일은 클라이언트에서 요청 할 수 없다.
따라서 html이나 javascript, css등 클라이언트에서 요청할 수 있는
파일을 이 폴더에 두어서는 안된다.

WebContent/WEB-INF/web.xml
웹 애플리케이션 배치 설명서(Deployment Descriptor) 파일이다.
영어 표현을 줄여서 'DD 파일'이라고도 부른다.
서블릿이나 필터, 리스터, 매개변수, 기본 웹 페이지 등 웹 애플리케이션
컴포넌트들의 배치 정보를 이 파일에 작성한다.
서블릿 컨테이너는 클라이언트의 요청을 처리할 때
이 파일의 정보를 참고하여 서블릿 클래스를 찾거나 필터를 실행하는 등의
작업을 수행한다.

WebContent/WEB-INF/lib
자바 아카이브(Archive) 파일(.jar)을 두는 폴더이다.
아카이브란 우리 말로 기록 보관소라는 뜻이다.
아카이브 파일은 클래스 파일과 프로퍼티 파일들을 모아 놓은 보관소 파일이다.


Java EE와 서블릿 / jsp의 버전
Java EE는 기능 확장이 쉽고, 이기종 간의 이식이 쉬우며, 신뢰성과 보안성이 높고
트랜잭션 관리와 분산 기능을 쉽게 구현할 수 있는 기술을 제공한다.

WAS의 이해
클라이언트 서버 시스템 구조에서 서버 쪽 애플리케이션의 생성과 실행, 소멸을 관리하는
프로그램을 '애플리케이션 서버'라 한다.
서블릿과 서블릿 컨테이너와 같이 웹 기술을 기반으로 동작되는 애플리케이션 서브를
WAS(Web Application Server)라고 부른다.

서블릿 컨테이너
Java EE 기술 중에서 서블릿, JSP 등 웹 관련 부분만 구현한 서버도 있다.
이런 서버를 서블릿 컨테이너 또는 웹 컨테이너라고 부른다.
서블릿이나 JSP 프로그래밍을 할 때는 사용하는 제품의 버전에 맞추어 API를
사용해야 한다.
즉 사용하는 WAS가 어떤 버전의 Java EE 구현체인지 또는 서블릿 컨테이너인지 확인하여
그 버전에 맞는 API를 사용한다.


서블릿의 생명주기와 관련된 메서드
init(), service(), destroy()

Servlet 인터페이스에 정의된 다섯 개의 메서드 중에서
서블릿의 생성과 실행, 소멸
즉 생명주기 LifeCycle와 관련된 메서드이다.

init()은 서블릿 컨테이너가 서블릿을 생성한 후 초기화 작업을 수행하기 위해
호출하는 메서드이다. (단 한번만 호출됨. 새로고침 해도 한번 실행한건 다시 실행되지 않는다.)

서블릿이 클라이언트의 요청을 처리하기 전에 준비할 작업이 있다면
이 메서드에 작성해야 한다
ex: 데이터베이스 연결, 등

service()는 클라이언트가 요청할 때 마다 호출되는 메서드다
실질적으로 서비스 작업을 수행하는 메서드이다.
이 메서드에 서블릿이 해야 할 일을 작성하면 된다

destroy()는 서블릿 컨테이너가 종료되거나 웹 애플리케이션이 멈출 때,
또는 해당 서블릿을 비활성화 시킬 때 호출된다.
따라서 이 메서드에는 서비스 수행을 위해 확보했던 자원을 해제한다거나
데이터를 저장하는 등의 마무리 작업을 작성하면 된다.
(종료될때 단 한번만 호출됨.)


